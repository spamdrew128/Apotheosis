#ifndef __EVAL_CONSTANTS_H__
#define __EVAL_CONSTANTS_H__

#include <stdint.h>

#include "board_constants.h"
#include "board_info.h"

typedef uint8_t Phase_t;
typedef uint8_t Bucket_t;
enum {
  mg_phase,
  eg_phase,
  NUM_PHASES,
  PHASE_MAX = 24,

  KNIGHT_PHASE_VALUE = 1,
  BISHOP_PHASE_VALUE = 1,
  ROOK_PHASE_VALUE = 2,
  QUEEN_PHASE_VALUE = 4,
  PAWN_PHASE_VALUE = 0,
  KING_PHASE_VALUE = 0,

  QS_PST_MASK = C64(0x0F0F0F0F0F0F0F0F),
  KS_PST_MASK = C64(0xF0F0F0F0F0F0F0F0),
  NUM_PST_BUCKETS = 2,
};

// used for eval calcuations. Contains both EG and MG score packed into 1 value.
typedef int32_t Score_t;
#define S(mg, eg) \
	((Score_t)((uint32_t)eg << 16) + mg)

/*

 ██████╗ ██████╗ ███╗   ██╗███████╗████████╗ █████╗ ███╗   ██╗████████╗███████╗
██╔════╝██╔═══██╗████╗  ██║██╔════╝╚══██╔══╝██╔══██╗████╗  ██║╚══██╔══╝██╔════╝
██║     ██║   ██║██╔██╗ ██║███████╗   ██║   ███████║██╔██╗ ██║   ██║   ███████╗
██║     ██║   ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║╚██╗██║   ██║   ╚════██║
╚██████╗╚██████╔╝██║ ╚████║███████║   ██║   ██║  ██║██║ ╚████║   ██║   ███████║
 ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝

*/                                                                        

#define BISHOP_PAIR_BONUS \
   S(41, 66)

#define SUPPORTED_PASSER_BONUS \
   S(6, 39)

#define PASSED_PAWN_PST { { \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
   S(19, 334), S(35, 276), S(3, 290), S(21, 305), S(61, 345), S(6, 359), S(-26, 372), S(28, 369), \
   S(-36, 180), S(-57, 177), S(-15, 119), S(-120, 115), S(-3, 113), S(-40, 218), S(-84, 258), S(-98, 303), \
   S(-20, 84), S(11, 68), S(31, 49), S(25, 38), S(-27, 76), S(-78, 110), S(-86, 150), S(-130, 186), \
   S(2, 48), S(0, 43), S(2, 25), S(0, 14), S(-57, 40), S(-68, 53), S(-33, 78), S(-73, 96), \
   S(50, 10), S(12, 22), S(47, 4), S(-1, -3), S(-40, 14), S(-30, 20), S(-53, 41), S(-17, 32), \
   S(16, 4), S(92, 14), S(93, 5), S(-9, 1), S(-34, 12), S(-25, 9), S(-30, 29), S(-33, 30), \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
}, { \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
   S(82, 364), S(89, 345), S(35, 356), S(80, 315), S(100, 295), S(35, 283), S(37, 304), S(-14, 342), \
   S(37, 243), S(4, 260), S(0, 203), S(24, 150), S(3, 95), S(43, 109), S(-17, 109), S(-27, 163), \
   S(3, 136), S(1, 127), S(7, 94), S(4, 78), S(12, 55), S(55, 42), S(14, 69), S(16, 70), \
   S(2, 73), S(-26, 75), S(-28, 58), S(-10, 35), S(-18, 35), S(-17, 38), S(9, 53), S(36, 39), \
   S(-5, 30), S(-9, 35), S(-35, 32), S(-27, 20), S(5, 6), S(9, 12), S(37, 33), S(50, 10), \
   S(-6, 25), S(6, 28), S(5, 9), S(-25, 24), S(33, 5), S(31, 5), S(73, 25), S(23, 20), \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
}, }

#define BLOCKED_PASSERS { \
   S(153, -424), S(28, -132), S(2, -51), S(-5, -18), S(-2, 0), S(-15, -2), S(0, 0), S(0, 0), \
}

#define ROOK_OPEN_FILE { \
   S(67, 15), S(77, 5), S(67, 9), S(68, 17), S(74, 11), S(101, -5), S(149, -15), S(150, -5), \
}

#define ROOK_SEMI_OPEN_FILE { \
   S(9, 63), S(30, 29), S(30, 20), S(33, 17), S(34, 1), S(42, -2), S(72, -8), S(44, 42), \
}

#define QUEEN_OPEN_FILE { \
   S(7, 39), S(0, 45), S(-17, 45), S(-16, 57), S(0, 52), S(36, 7), S(60, -16), S(107, -26), \
}

#define QUEEN_SEMI_OPEN_FILE { \
   S(3, 14), S(18, 8), S(5, 14), S(-5, 48), S(13, 19), S(33, -34), S(55, -72), S(55, -34), \
}

#define KING_OPEN_FILE { \
   S(-88, -13), S(-124, 1), S(-96, -1), S(-40, -13), S(-65, -4), S(-95, 7), S(-110, 14), S(-62, 2), \
}

#define KING_SEMI_OPEN_FILE { \
   S(-35, 39), S(-64, 21), S(-24, -1), S(-13, -6), S(-17, -2), S(-31, 2), S(-47, 19), S(-42, 34), \
}

#define ISOLATED_PAWNS { \
   S(-16, -20), S(-23, -16), S(-24, -18), S(-38, -13), S(-34, -21), S(-12, -17), S(-19, -18), S(-32, -15), \
}

/*
Average PST values for MG, EG:
Knight Values: 462 365
Bishop Values: 468 403
Rook Values: 565 727
Queen Values: 1276 1328
Pawn Values: 108 158
*/

#define KNIGHT_PST { { \
   S(212, 229), S(424, 248), S(275, 311), S(454, 298), S(526, 289), S(455, 297), S(410, 292), S(351, 238), \
   S(415, 281), S(518, 294), S(465, 326), S(543, 320), S(490, 342), S(567, 308), S(424, 325), S(311, 332), \
   S(463, 297), S(545, 311), S(551, 331), S(547, 341), S(534, 342), S(537, 330), S(493, 343), S(366, 325), \
   S(451, 336), S(477, 345), S(530, 368), S(522, 362), S(532, 369), S(533, 350), S(484, 344), S(413, 337), \
   S(449, 319), S(497, 341), S(487, 378), S(494, 367), S(464, 381), S(479, 364), S(433, 349), S(385, 351), \
   S(426, 308), S(446, 354), S(452, 361), S(464, 373), S(488, 360), S(464, 350), S(441, 350), S(382, 341), \
   S(347, 308), S(417, 337), S(419, 353), S(425, 367), S(418, 361), S(427, 354), S(389, 337), S(364, 325), \
   S(410, 258), S(392, 296), S(339, 355), S(401, 330), S(355, 338), S(390, 320), S(406, 260), S(304, 306), \
}, { \
   S(257, 361), S(268, 423), S(404, 396), S(423, 394), S(502, 381), S(348, 401), S(410, 331), S(340, 269), \
   S(391, 384), S(425, 422), S(524, 404), S(551, 407), S(525, 415), S(565, 373), S(473, 375), S(460, 359), \
   S(420, 402), S(515, 403), S(541, 435), S(579, 425), S(630, 404), S(704, 379), S(585, 395), S(512, 366), \
   S(474, 399), S(508, 429), S(527, 445), S(569, 447), S(538, 454), S(594, 442), S(505, 445), S(538, 395), \
   S(465, 402), S(483, 434), S(505, 450), S(507, 454), S(521, 456), S(515, 449), S(521, 424), S(480, 394), \
   S(458, 389), S(479, 415), S(504, 420), S(499, 440), S(518, 444), S(509, 421), S(517, 412), S(463, 397), \
   S(442, 351), S(452, 376), S(475, 410), S(485, 411), S(490, 414), S(502, 400), S(495, 386), S(471, 370), \
   S(345, 367), S(456, 340), S(425, 384), S(439, 398), S(462, 398), S(464, 393), S(456, 364), S(433, 328), \
}, }

#define BISHOP_PST { { \
   S(312, 375), S(449, 355), S(417, 344), S(366, 349), S(266, 387), S(310, 378), S(375, 363), S(399, 363), \
   S(463, 328), S(463, 359), S(436, 363), S(436, 360), S(514, 363), S(412, 382), S(412, 394), S(310, 387), \
   S(491, 351), S(618, 328), S(496, 373), S(538, 365), S(500, 381), S(518, 369), S(414, 392), S(406, 375), \
   S(469, 360), S(453, 379), S(516, 381), S(529, 374), S(503, 402), S(493, 384), S(485, 375), S(415, 371), \
   S(431, 363), S(444, 381), S(437, 396), S(484, 393), S(495, 384), S(511, 374), S(456, 371), S(402, 370), \
   S(430, 359), S(442, 378), S(448, 391), S(449, 388), S(487, 384), S(475, 376), S(499, 371), S(453, 372), \
   S(447, 345), S(440, 378), S(440, 362), S(446, 369), S(448, 370), S(487, 365), S(487, 353), S(419, 348), \
   S(306, 369), S(362, 384), S(422, 345), S(386, 379), S(411, 363), S(416, 349), S(419, 365), S(358, 368), \
}, { \
   S(475, 420), S(436, 431), S(412, 439), S(397, 439), S(416, 438), S(426, 434), S(445, 429), S(473, 405), \
   S(436, 445), S(499, 444), S(493, 440), S(469, 436), S(511, 437), S(526, 422), S(508, 434), S(444, 411), \
   S(452, 445), S(498, 453), S(523, 455), S(532, 447), S(558, 441), S(593, 451), S(543, 442), S(502, 432), \
   S(474, 443), S(496, 457), S(515, 465), S(567, 461), S(543, 473), S(537, 463), S(502, 454), S(481, 438), \
   S(481, 433), S(503, 451), S(509, 468), S(530, 473), S(532, 464), S(510, 461), S(512, 437), S(491, 422), \
   S(500, 427), S(516, 445), S(509, 459), S(516, 457), S(509, 464), S(521, 450), S(509, 437), S(500, 421), \
   S(514, 406), S(516, 406), S(517, 423), S(491, 438), S(503, 441), S(520, 435), S(539, 416), S(504, 396), \
   S(462, 400), S(493, 416), S(475, 404), S(461, 432), S(471, 428), S(475, 419), S(481, 416), S(473, 396), \
}, }

#define ROOK_PST { { \
   S(528, 682), S(501, 693), S(519, 686), S(543, 679), S(545, 685), S(543, 691), S(501, 692), S(515, 679), \
   S(588, 652), S(599, 658), S(608, 648), S(592, 648), S(540, 667), S(545, 682), S(462, 691), S(460, 687), \
   S(578, 653), S(598, 652), S(626, 653), S(604, 633), S(555, 656), S(493, 691), S(496, 675), S(450, 669), \
   S(527, 660), S(487, 673), S(493, 674), S(542, 664), S(498, 680), S(526, 684), S(425, 690), S(465, 667), \
   S(451, 666), S(484, 668), S(485, 669), S(488, 662), S(484, 671), S(488, 680), S(429, 679), S(431, 671), \
   S(449, 656), S(478, 660), S(502, 656), S(502, 639), S(469, 662), S(487, 670), S(434, 678), S(455, 644), \
   S(471, 637), S(460, 663), S(489, 647), S(487, 647), S(458, 665), S(464, 680), S(412, 662), S(426, 650), \
   S(502, 646), S(512, 659), S(505, 663), S(505, 666), S(506, 667), S(496, 675), S(425, 696), S(475, 653), \
}, { \
   S(666, 787), S(662, 800), S(624, 815), S(682, 786), S(680, 797), S(644, 813), S(677, 806), S(702, 786), \
   S(635, 802), S(628, 817), S(667, 806), S(710, 784), S(706, 784), S(707, 794), S(582, 829), S(631, 798), \
   S(600, 796), S(627, 803), S(638, 802), S(667, 783), S(674, 782), S(710, 779), S(675, 790), S(657, 777), \
   S(584, 798), S(603, 800), S(620, 810), S(632, 788), S(624, 793), S(657, 793), S(630, 797), S(613, 784), \
   S(593, 779), S(569, 805), S(594, 805), S(604, 787), S(619, 777), S(613, 788), S(613, 790), S(617, 760), \
   S(588, 769), S(587, 788), S(593, 789), S(598, 779), S(618, 774), S(622, 779), S(639, 769), S(609, 752), \
   S(585, 768), S(593, 775), S(591, 788), S(601, 776), S(612, 770), S(635, 773), S(643, 763), S(555, 761), \
   S(618, 779), S(608, 786), S(614, 796), S(626, 783), S(629, 782), S(633, 786), S(588, 797), S(634, 735), \
}, }

#define QUEEN_PST { { \
   S(1188, 1192), S(1189, 1211), S(1383, 1120), S(1168, 1202), S(1247, 1196), S(1177, 1226), S(1267, 1141), S(1074, 1219), \
   S(1346, 1100), S(1275, 1153), S(1360, 1148), S(1170, 1268), S(1257, 1212), S(1168, 1226), S(1069, 1267), S(1134, 1177), \
   S(1303, 1109), S(1327, 1154), S(1425, 1160), S(1309, 1167), S(1195, 1241), S(1145, 1254), S(1132, 1240), S(1090, 1211), \
   S(1212, 1198), S(1223, 1188), S(1189, 1223), S(1187, 1239), S(1191, 1201), S(1161, 1222), S(1122, 1234), S(1154, 1162), \
   S(1196, 1199), S(1175, 1229), S(1160, 1299), S(1193, 1218), S(1168, 1184), S(1142, 1267), S(1132, 1227), S(1104, 1185), \
   S(1198, 1158), S(1184, 1189), S(1169, 1207), S(1164, 1170), S(1173, 1196), S(1197, 1173), S(1139, 1241), S(1115, 1155), \
   S(1171, 1137), S(1154, 1173), S(1209, 1133), S(1157, 1189), S(1192, 1142), S(1202, 1154), S(1093, 1224), S(1113, 1134), \
   S(1110, 1188), S(1148, 1168), S(1151, 1175), S(1188, 1102), S(1172, 1123), S(1134, 1188), S(1080, 1214), S(1072, 1171), \
}, { \
   S(1307, 1447), S(1339, 1472), S(1355, 1477), S(1384, 1479), S(1425, 1463), S(1469, 1467), S(1471, 1477), S(1376, 1525), \
   S(1324, 1436), S(1318, 1463), S(1341, 1505), S(1343, 1510), S(1320, 1579), S(1449, 1513), S(1379, 1556), S(1379, 1527), \
   S(1331, 1425), S(1354, 1433), S(1357, 1475), S(1388, 1491), S(1429, 1489), S(1484, 1515), S(1454, 1498), S(1429, 1508), \
   S(1318, 1453), S(1335, 1470), S(1349, 1482), S(1369, 1485), S(1351, 1553), S(1372, 1575), S(1361, 1584), S(1362, 1524), \
   S(1358, 1411), S(1336, 1474), S(1359, 1470), S(1359, 1501), S(1360, 1503), S(1357, 1522), S(1367, 1528), S(1368, 1501), \
   S(1351, 1405), S(1375, 1395), S(1355, 1469), S(1369, 1441), S(1374, 1442), S(1369, 1478), S(1383, 1478), S(1367, 1450), \
   S(1340, 1388), S(1365, 1411), S(1390, 1384), S(1383, 1407), S(1383, 1404), S(1387, 1408), S(1378, 1410), S(1347, 1438), \
   S(1350, 1403), S(1338, 1408), S(1362, 1398), S(1386, 1362), S(1363, 1387), S(1318, 1429), S(1312, 1446), S(1335, 1381), \
}, }

#define PAWN_PST { { \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
   S(19, 334), S(35, 276), S(3, 290), S(21, 305), S(61, 345), S(6, 359), S(-26, 372), S(28, 369), \
   S(129, 142), S(229, 95), S(213, 127), S(295, 131), S(131, 187), S(161, 129), S(100, 174), S(136, 149), \
   S(63, 135), S(105, 112), S(137, 110), S(153, 109), S(150, 120), S(148, 119), S(134, 131), S(136, 128), \
   S(43, 129), S(64, 117), S(110, 109), S(138, 111), S(134, 115), S(141, 109), S(110, 118), S(123, 115), \
   S(36, 121), S(60, 115), S(96, 116), S(89, 124), S(115, 120), S(129, 111), S(132, 102), S(129, 104), \
   S(30, 133), S(64, 118), S(103, 117), S(86, 114), S(98, 122), S(159, 108), S(137, 104), S(111, 109), \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
}, { \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
   S(82, 364), S(89, 345), S(35, 356), S(80, 315), S(100, 295), S(35, 283), S(37, 304), S(-14, 342), \
   S(90, 177), S(127, 151), S(155, 143), S(168, 139), S(220, 150), S(228, 122), S(194, 155), S(147, 148), \
   S(92, 153), S(121, 133), S(123, 129), S(146, 106), S(152, 113), S(146, 108), S(116, 123), S(110, 121), \
   S(72, 140), S(102, 123), S(111, 117), S(138, 113), S(134, 116), S(136, 104), S(102, 112), S(101, 111), \
   S(79, 125), S(98, 113), S(110, 115), S(103, 124), S(112, 132), S(126, 112), S(133, 101), S(115, 102), \
   S(64, 136), S(102, 114), S(85, 135), S(81, 134), S(82, 146), S(152, 117), S(138, 108), S(104, 103), \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
}, }

#define KING_PST { { \
   S(78, -100), S(138, -36), S(93, -76), S(209, -82), S(334, -33), S(402, -10), S(430, -45), S(344, -58), \
   S(67, -41), S(205, 21), S(152, 10), S(0, 19), S(346, 38), S(433, 27), S(442, 13), S(506, -50), \
   S(113, -16), S(130, 9), S(258, 24), S(-26, 39), S(369, 43), S(473, 33), S(462, 14), S(417, -3), \
   S(-58, -22), S(41, 17), S(32, 30), S(-102, 63), S(323, 61), S(309, 60), S(388, 44), S(372, 9), \
   S(-110, -9), S(-70, 14), S(-96, 45), S(-179, 69), S(239, 78), S(342, 48), S(370, 18), S(292, 1), \
   S(-115, -21), S(-24, -1), S(-117, 38), S(-151, 54), S(310, 54), S(303, 39), S(379, 6), S(386, -20), \
   S(18, -44), S(11, -16), S(-30, 4), S(-135, 30), S(326, 35), S(358, 13), S(409, -15), S(407, -37), \
   S(20, -94), S(54, -73), S(-30, -36), S(-134, -2), S(369, -25), S(319, -13), S(432, -59), S(418, -87), \
}, { \
   S(-182, -151), S(-249, -65), S(-243, -53), S(-336, -27), S(-25, -22), S(39, -21), S(314, -87), S(83, -60), \
   S(-181, -60), S(-269, 1), S(-265, 0), S(-402, 29), S(63, 15), S(82, 17), S(115, 20), S(-55, 19), \
   S(-312, -7), S(-262, 11), S(-319, 20), S(-370, 44), S(55, 38), S(262, 28), S(187, 44), S(30, 8), \
   S(-335, -8), S(-375, 31), S(-393, 39), S(-450, 64), S(-42, 56), S(29, 44), S(-75, 47), S(-202, 23), \
   S(-452, -6), S(-336, -2), S(-436, 41), S(-525, 66), S(-116, 74), S(-115, 58), S(-93, 30), S(-158, 5), \
   S(-388, -28), S(-386, -1), S(-441, 28), S(-519, 56), S(-108, 65), S(-75, 44), S(-20, 12), S(-50, -15), \
   S(-292, -74), S(-346, -25), S(-424, 12), S(-483, 32), S(-108, 49), S(-46, 26), S(26, -5), S(28, -35), \
   S(-316, -110), S(-279, -94), S(-320, -61), S(-468, -7), S(-13, -25), S(-69, -4), S(46, -48), S(41, -92), \
}, }

#endif