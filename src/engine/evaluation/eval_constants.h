#ifndef __EVAL_CONSTANTS_H__
#define __EVAL_CONSTANTS_H__

#include <stdint.h>

#include "board_constants.h"
#include "board_info.h"

typedef uint8_t Phase_t;
typedef uint8_t Bucket_t;
enum {
  mg_phase,
  eg_phase,
  NUM_PHASES,
  PHASE_MAX = 24,

  KNIGHT_PHASE_VALUE = 1,
  BISHOP_PHASE_VALUE = 1,
  ROOK_PHASE_VALUE = 2,
  QUEEN_PHASE_VALUE = 4,
  PAWN_PHASE_VALUE = 0,
  KING_PHASE_VALUE = 0,

  QS_PST_MASK = C64(0x0F0F0F0F0F0F0F0F),
  KS_PST_MASK = C64(0xF0F0F0F0F0F0F0F0),
  NUM_PST_BUCKETS = 2,
};

// used for eval calcuations. Contains both EG and MG score packed into 1 value.
typedef int32_t Score_t;
#define S(mg, eg) \
	((Score_t)((uint32_t)eg << 16) + mg)

/*

 ██████╗ ██████╗ ███╗   ██╗███████╗████████╗ █████╗ ███╗   ██╗████████╗███████╗
██╔════╝██╔═══██╗████╗  ██║██╔════╝╚══██╔══╝██╔══██╗████╗  ██║╚══██╔══╝██╔════╝
██║     ██║   ██║██╔██╗ ██║███████╗   ██║   ███████║██╔██╗ ██║   ██║   ███████╗
██║     ██║   ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║╚██╗██║   ██║   ╚════██║
╚██████╗╚██████╔╝██║ ╚████║███████║   ██║   ██║  ██║██║ ╚████║   ██║   ███████║
 ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝

*/                                                                        

#define BISHOP_PAIR_BONUS \
   S(36, 66)

#define PASSED_PAWN_PST { { \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
   S(16, 340), S(31, 281), S(9, 296), S(11, 312), S(39, 355), S(-6, 370), S(-50, 383), S(21, 375), \
   S(-28, 187), S(-39, 181), S(-5, 122), S(-107, 116), S(-4, 126), S(-16, 220), S(-77, 266), S(-84, 309), \
   S(-15, 86), S(11, 71), S(41, 51), S(33, 41), S(-21, 80), S(-62, 112), S(-74, 152), S(-123, 190), \
   S(10, 49), S(0, 44), S(1, 26), S(2, 17), S(-54, 42), S(-70, 57), S(-26, 80), S(-68, 96), \
   S(60, 7), S(5, 23), S(49, 3), S(2, -3), S(-48, 17), S(-32, 22), S(-60, 43), S(-14, 32), \
   S(14, 3), S(81, 16), S(90, 7), S(-16, -5), S(-31, 8), S(-33, 11), S(-44, 31), S(-34, 28), \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
}, { \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
   S(71, 369), S(50, 356), S(17, 363), S(63, 322), S(70, 306), S(29, 288), S(3, 314), S(-21, 345), \
   S(41, 248), S(2, 266), S(2, 210), S(28, 153), S(3, 97), S(53, 111), S(-16, 112), S(-23, 165), \
   S(12, 136), S(2, 130), S(10, 97), S(6, 81), S(16, 56), S(60, 43), S(17, 69), S(23, 70), \
   S(6, 73), S(-23, 75), S(-37, 62), S(-13, 38), S(-13, 36), S(-21, 41), S(11, 52), S(38, 39), \
   S(0, 27), S(-14, 36), S(-35, 30), S(-31, 21), S(4, 6), S(5, 12), S(30, 32), S(51, 8), \
   S(-2, 21), S(-1, 28), S(-2, 10), S(-30, 18), S(25, 5), S(25, 5), S(59, 27), S(21, 19), \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
}, }

#define BLOCKED_PASSERS { \
   S(146, -430), S(23, -134), S(0, -51), S(-1, -19), S(0, 0), S(-11, -2), S(0, 0), S(0, 0), \
}

#define ROOK_OPEN_FILE { \
   S(41, -3), S(54, -9), S(47, -7), S(50, -5), S(57, -6), S(82, -20), S(130, -27), S(127, -23), \
}

#define ROOK_SEMI_OPEN_FILE { \
   S(-12, 53), S(11, 22), S(17, 10), S(27, 1), S(25, -7), S(29, -11), S(53, -12), S(25, 31), \
}

#define QUEEN_OPEN_FILE { \
   S(-5, 4), S(-5, 18), S(-22, 21), S(-19, 29), S(-3, 28), S(32, -15), S(58, -44), S(96, -65), \
}

#define QUEEN_SEMI_OPEN_FILE { \
   S(-4, 6), S(13, 3), S(0, 11), S(-10, 49), S(8, 19), S(31, -43), S(46, -70), S(48, -45), \
}

#define KING_OPEN_FILE { \
   S(-85, -14), S(-122, 0), S(-93, -3), S(-51, -10), S(-68, -2), S(-93, 8), S(-111, 16), S(-57, 2), \
}

#define KING_SEMI_OPEN_FILE { \
   S(-35, 38), S(-61, 18), S(-26, -3), S(-21, -5), S(-25, -1), S(-33, 2), S(-45, 19), S(-47, 36), \
}

#define ISOLATED_PAWNS { \
   S(-19, -19), S(-21, -15), S(-22, -17), S(-37, -11), S(-32, -20), S(-10, -17), S(-15, -18), S(-34, -14), \
}

#define KNIGHT_MOBILITY { \
   S(274, 141), S(298, 200), S(312, 230), S(317, 246), S(331, 249), S(339, 261), S(348, 260), S(357, 257), S(382, 240), \
}

#define BISHOP_MOBILITY { \
   S(268, 156), S(283, 191), S(301, 200), S(311, 216), S(320, 234), S(324, 246), S(329, 252), S(334, 255), S(333, 264), S(342, 260), S(355, 260), S(383, 251), S(355, 285), S(428, 241), \
}

#define ROOK_MOBILITY { \
   S(341, 314), S(356, 342), S(360, 353), S(366, 368), S(367, 380), S(373, 388), S(376, 395), S(383, 399), S(394, 404), S(400, 409), S(402, 415), S(413, 419), S(415, 426), S(427, 420), S(434, 417), \
}

#define QUEEN_MOBILITY { \
   S(784, 500), S(781, 600), S(779, 554), S(781, 572), S(787, 573), S(788, 601), S(790, 630), S(793, 663), S(797, 677), S(801, 691), S(802, 702), S(807, 716), S(808, 724), S(810, 739), S(819, 747), S(819, 759), S(819, 767), S(823, 772), S(848, 763), S(861, 764), S(887, 762), S(906, 764), S(956, 732), S(953, 746), S(969, 730), S(1093, 673), S(809, 859), S(775, 839), \
}

#define PAWN_THREAT_ON_KNIGHT S(50, 0)
#define PAWN_THREAT_ON_BISHOP S(51, 30)
#define PAWN_THREAT_ON_ROOK S(115, -55)
#define PAWN_THREAT_ON_QUEEN S(53, -33)

#define KNIGHT_THREAT_ON_BISHOP S(24, 20)
#define KNIGHT_THREAT_ON_ROOK S(68, -22)
#define KNIGHT_THREAT_ON_QUEEN S(28, -57)

#define BISHOP_THREAT_ON_KNIGHT S(20, 20)
#define BISHOP_THREAT_ON_ROOK S(42, -2)
#define BISHOP_THREAT_ON_QUEEN S(38, 0)

#define ROOK_THREAT_ON_QUEEN S(57, -46)

/*
Average PST values for MG, EG:
Knight Values: 162 118
Bishop Values: 181 155
Rook Values: 245 327
Queen Values: 592 580
Pawn Values: 104 159
*/

#define KNIGHT_PST { { \
   S(-69, 10), S(176, 7), S(-2, 66), S(164, 57), S(241, 46), S(143, 59), S(100, 61), S(72, 21), \
   S(147, 46), S(224, 56), S(141, 82), S(245, 69), S(198, 91), S(215, 71), S(136, 86), S(20, 102), \
   S(187, 56), S(229, 64), S(216, 92), S(219, 99), S(208, 100), S(210, 89), S(172, 98), S(80, 86), \
   S(174, 97), S(184, 93), S(217, 122), S(212, 115), S(224, 121), S(213, 106), S(186, 95), S(114, 103), \
   S(171, 81), S(220, 86), S(185, 129), S(202, 117), S(170, 131), S(185, 114), S(146, 99), S(104, 122), \
   S(143, 72), S(156, 103), S(156, 110), S(169, 122), S(199, 107), S(174, 96), S(149, 98), S(108, 113), \
   S(72, 75), S(146, 99), S(136, 102), S(153, 115), S(150, 107), S(136, 106), S(109, 104), S(89, 100), \
   S(99, 49), S(125, 84), S(82, 114), S(145, 94), S(105, 99), S(134, 78), S(133, 54), S(35, 97), \
}, { \
   S(-37, 139), S(-41, 176), S(73, 147), S(97, 144), S(187, 129), S(51, 146), S(125, 82), S(53, 39), \
   S(68, 146), S(97, 176), S(171, 149), S(209, 149), S(198, 156), S(213, 123), S(166, 125), S(135, 122), \
   S(103, 154), S(171, 146), S(186, 182), S(230, 168), S(267, 154), S(371, 119), S(243, 141), S(216, 114), \
   S(167, 151), S(196, 163), S(193, 185), S(248, 184), S(219, 189), S(261, 182), S(197, 181), S(234, 146), \
   S(166, 153), S(177, 168), S(194, 183), S(204, 187), S(212, 192), S(212, 183), S(229, 159), S(187, 154), \
   S(161, 141), S(170, 151), S(192, 152), S(193, 173), S(216, 175), S(205, 152), S(209, 150), S(172, 153), \
   S(152, 109), S(166, 123), S(172, 148), S(205, 139), S(207, 146), S(199, 138), S(202, 139), S(181, 131), \
   S(59, 145), S(170, 122), S(151, 132), S(165, 150), S(191, 149), S(177, 147), S(172, 137), S(148, 114), \
}, }

#define BISHOP_PST { { \
   S(40, 143), S(155, 122), S(119, 109), S(86, 107), S(-20, 146), S(35, 136), S(82, 126), S(120, 127), \
   S(192, 95), S(170, 115), S(149, 118), S(153, 114), S(208, 118), S(111, 137), S(106, 151), S(15, 156), \
   S(227, 113), S(342, 81), S(210, 124), S(231, 119), S(202, 132), S(218, 120), S(125, 146), S(128, 138), \
   S(195, 119), S(169, 132), S(221, 131), S(226, 123), S(205, 149), S(193, 136), S(197, 127), S(127, 135), \
   S(158, 123), S(157, 133), S(146, 145), S(193, 141), S(205, 132), S(226, 123), S(172, 124), S(133, 132), \
   S(147, 125), S(164, 132), S(169, 141), S(173, 137), S(214, 133), S(206, 126), S(224, 130), S(175, 141), \
   S(180, 110), S(170, 136), S(169, 116), S(182, 124), S(186, 123), S(218, 121), S(220, 115), S(160, 121), \
   S(56, 142), S(121, 145), S(175, 130), S(141, 143), S(179, 125), S(162, 129), S(153, 130), S(115, 141), \
}, { \
   S(174, 177), S(134, 183), S(91, 192), S(84, 188), S(113, 184), S(131, 179), S(155, 177), S(179, 157), \
   S(130, 202), S(159, 194), S(173, 183), S(152, 180), S(172, 183), S(213, 165), S(163, 186), S(139, 167), \
   S(176, 185), S(193, 194), S(202, 192), S(208, 185), S(247, 178), S(286, 188), S(255, 178), S(228, 172), \
   S(172, 190), S(201, 189), S(201, 201), S(260, 192), S(226, 206), S(230, 199), S(200, 191), S(197, 185), \
   S(189, 178), S(200, 188), S(215, 199), S(231, 204), S(235, 194), S(206, 196), S(216, 177), S(204, 173), \
   S(207, 175), S(224, 187), S(219, 194), S(222, 193), S(220, 201), S(233, 185), S(215, 182), S(207, 178), \
   S(226, 161), S(231, 156), S(224, 168), S(214, 177), S(224, 178), S(237, 177), S(252, 165), S(218, 158), \
   S(193, 164), S(224, 171), S(208, 180), S(194, 184), S(210, 182), S(200, 186), S(215, 167), S(204, 152), \
}, }

#define ROOK_PST { { \
   S(224, 289), S(180, 302), S(201, 297), S(202, 299), S(207, 300), S(207, 303), S(179, 298), S(194, 286), \
   S(282, 264), S(288, 267), S(287, 261), S(264, 270), S(217, 281), S(221, 292), S(148, 299), S(152, 296), \
   S(277, 268), S(303, 260), S(323, 265), S(284, 257), S(249, 268), S(186, 301), S(193, 282), S(142, 282), \
   S(229, 277), S(196, 285), S(197, 288), S(242, 283), S(197, 295), S(228, 293), S(122, 301), S(160, 284), \
   S(153, 287), S(192, 283), S(190, 285), S(189, 285), S(194, 284), S(196, 293), S(139, 289), S(128, 291), \
   S(147, 279), S(189, 273), S(207, 271), S(213, 261), S(178, 277), S(200, 283), S(140, 290), S(160, 262), \
   S(171, 257), S(162, 277), S(201, 259), S(195, 270), S(170, 280), S(165, 294), S(123, 273), S(133, 270), \
   S(195, 263), S(216, 264), S(209, 268), S(205, 278), S(207, 275), S(202, 284), S(132, 300), S(174, 270), \
}, { \
   S(311, 371), S(302, 383), S(256, 401), S(310, 379), S(306, 386), S(280, 398), S(330, 384), S(340, 371), \
   S(287, 387), S(276, 401), S(310, 392), S(353, 376), S(353, 371), S(349, 377), S(235, 409), S(289, 380), \
   S(266, 383), S(292, 388), S(295, 389), S(329, 375), S(338, 365), S(377, 361), S(357, 365), S(328, 361), \
   S(251, 388), S(275, 384), S(284, 398), S(297, 380), S(294, 380), S(328, 376), S(310, 378), S(281, 373), \
   S(257, 373), S(247, 390), S(273, 390), S(274, 381), S(294, 365), S(284, 375), S(292, 373), S(277, 356), \
   S(261, 362), S(257, 377), S(270, 377), S(275, 373), S(292, 365), S(303, 363), S(306, 357), S(277, 347), \
   S(254, 363), S(267, 362), S(266, 376), S(280, 369), S(294, 358), S(307, 359), S(319, 346), S(226, 355), \
   S(282, 366), S(279, 365), S(284, 375), S(294, 368), S(300, 362), S(304, 368), S(262, 372), S(301, 324), \
}, }

#define QUEEN_PST { { \
   S(566, 470), S(568, 476), S(706, 410), S(500, 478), S(599, 462), S(503, 509), S(612, 420), S(421, 509), \
   S(714, 385), S(613, 429), S(659, 444), S(492, 551), S(571, 490), S(486, 502), S(391, 548), S(473, 473), \
   S(655, 399), S(674, 434), S(751, 437), S(647, 434), S(526, 508), S(462, 527), S(464, 515), S(429, 512), \
   S(571, 492), S(571, 465), S(531, 489), S(519, 504), S(517, 462), S(501, 477), S(456, 512), S(486, 474), \
   S(538, 505), S(509, 513), S(495, 575), S(534, 483), S(508, 444), S(481, 535), S(465, 520), S(438, 497), \
   S(540, 464), S(525, 471), S(514, 473), S(510, 442), S(522, 466), S(546, 446), S(487, 528), S(471, 458), \
   S(520, 443), S(501, 455), S(550, 417), S(515, 461), S(548, 420), S(556, 435), S(436, 522), S(469, 450), \
   S(455, 492), S(509, 447), S(512, 449), S(539, 410), S(535, 401), S(500, 467), S(459, 493), S(438, 470), \
}, { \
   S(613, 663), S(626, 683), S(641, 684), S(662, 690), S(705, 675), S(745, 687), S(763, 694), S(683, 743), \
   S(607, 676), S(585, 683), S(605, 719), S(611, 727), S(583, 798), S(718, 729), S(640, 780), S(671, 770), \
   S(622, 657), S(637, 649), S(631, 680), S(657, 702), S(711, 689), S(765, 728), S(747, 718), S(721, 757), \
   S(603, 687), S(627, 672), S(628, 687), S(644, 685), S(632, 750), S(656, 781), S(653, 811), S(655, 769), \
   S(650, 643), S(620, 684), S(651, 673), S(640, 704), S(647, 701), S(641, 737), S(654, 757), S(652, 767), \
   S(643, 643), S(664, 624), S(647, 674), S(660, 654), S(667, 657), S(661, 697), S(669, 717), S(657, 715), \
   S(643, 628), S(660, 627), S(680, 613), S(685, 620), S(686, 614), S(680, 635), S(676, 637), S(645, 699), \
   S(646, 635), S(643, 628), S(665, 613), S(685, 596), S(668, 605), S(625, 659), S(616, 679), S(639, 625), \
}, }

#define PAWN_PST { { \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
   S(16, 340), S(31, 281), S(9, 296), S(11, 312), S(39, 355), S(-6, 370), S(-50, 383), S(21, 375), \
   S(125, 142), S(221, 95), S(197, 132), S(277, 138), S(126, 182), S(132, 135), S(89, 177), S(124, 150), \
   S(62, 136), S(98, 112), S(123, 112), S(140, 109), S(132, 121), S(134, 121), S(118, 134), S(131, 129), \
   S(46, 128), S(58, 118), S(111, 109), S(137, 109), S(130, 115), S(143, 108), S(103, 120), S(123, 115), \
   S(39, 122), S(61, 114), S(97, 115), S(102, 119), S(129, 116), S(138, 109), S(135, 102), S(133, 103), \
   S(44, 131), S(70, 116), S(110, 115), S(121, 112), S(127, 119), S(169, 106), S(149, 102), S(122, 107), \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
}, { \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
   S(71, 369), S(50, 356), S(17, 363), S(63, 322), S(70, 306), S(29, 288), S(3, 314), S(-21, 345), \
   S(80, 179), S(113, 152), S(129, 145), S(146, 143), S(201, 156), S(203, 128), S(187, 156), S(138, 150), \
   S(83, 156), S(106, 134), S(109, 130), S(132, 106), S(130, 117), S(134, 110), S(100, 126), S(106, 122), \
   S(71, 140), S(93, 124), S(116, 114), S(138, 109), S(131, 114), S(140, 102), S(97, 113), S(100, 111), \
   S(79, 126), S(99, 110), S(112, 114), S(116, 118), S(123, 128), S(131, 110), S(132, 101), S(114, 103), \
   S(76, 132), S(112, 109), S(97, 130), S(118, 128), S(112, 140), S(161, 114), S(150, 104), S(115, 99), \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
}, }

#define KING_PST { { \
   S(36, -99), S(119, -32), S(75, -78), S(227, -86), S(234, -31), S(329, -11), S(326, -43), S(230, -55), \
   S(56, -40), S(217, 20), S(154, 11), S(27, 13), S(259, 38), S(338, 28), S(360, 12), S(399, -49), \
   S(112, -17), S(133, 10), S(269, 26), S(3, 35), S(293, 42), S(387, 32), S(375, 12), S(318, -2), \
   S(-64, -21), S(51, 17), S(29, 31), S(-85, 60), S(238, 60), S(217, 61), S(293, 44), S(276, 10), \
   S(-107, -10), S(-68, 13), S(-98, 46), S(-167, 66), S(147, 77), S(248, 47), S(271, 18), S(189, 1), \
   S(-123, -21), S(-29, -1), S(-127, 40), S(-152, 53), S(209, 54), S(201, 39), S(273, 7), S(282, -20), \
   S(16, -45), S(0, -15), S(-50, 8), S(-136, 28), S(225, 35), S(253, 13), S(298, -14), S(295, -37), \
   S(7, -95), S(55, -74), S(-20, -38), S(-128, -3), S(276, -21), S(237, -15), S(338, -62), S(315, -89), \
}, { \
   S(-60, -160), S(-141, -68), S(-125, -57), S(-201, -37), S(-20, -20), S(57, -22), S(321, -88), S(81, -59), \
   S(-78, -64), S(-167, 0), S(-148, -1), S(-274, 21), S(82, 14), S(100, 16), S(132, 19), S(-53, 18), \
   S(-210, -9), S(-160, 10), S(-219, 20), S(-256, 40), S(67, 38), S(277, 28), S(197, 42), S(41, 6), \
   S(-262, -4), S(-282, 32), S(-297, 40), S(-341, 61), S(-35, 56), S(25, 46), S(-72, 47), S(-198, 22), \
   S(-364, -5), S(-247, -1), S(-348, 43), S(-427, 64), S(-111, 73), S(-115, 58), S(-96, 30), S(-164, 6), \
   S(-307, -26), S(-303, 0), S(-362, 31), S(-430, 56), S(-112, 65), S(-80, 44), S(-35, 14), S(-62, -13), \
   S(-214, -73), S(-272, -22), S(-353, 16), S(-382, 28), S(-99, 46), S(-58, 29), S(10, -3), S(15, -34), \
   S(-237, -111), S(-191, -93), S(-227, -57), S(-376, -6), S(-14, -17), S(-61, -3), S(46, -50), S(31, -91), \
}, }

#define KING_RING_THREATS { \
   S(146, -430), S(23, -134), S(0, -51), S(-1, -19), S(0, 0), \
}

#endif