#ifndef __EVAL_CONSTANTS_H__
#define __EVAL_CONSTANTS_H__

#include <stdint.h>

#include "board_constants.h"
#include "board_info.h"

typedef uint8_t Phase_t;
typedef uint8_t Bucket_t;
enum {
  mg_phase,
  eg_phase,
  NUM_PHASES,
  PHASE_MAX = 24,

  KNIGHT_PHASE_VALUE = 1,
  BISHOP_PHASE_VALUE = 1,
  ROOK_PHASE_VALUE = 2,
  QUEEN_PHASE_VALUE = 4,
  PAWN_PHASE_VALUE = 0,
  KING_PHASE_VALUE = 0,

  QS_PST_MASK = C64(0x0F0F0F0F0F0F0F0F),
  KS_PST_MASK = C64(0xF0F0F0F0F0F0F0F0),
  NUM_PST_BUCKETS = 2,
};

// used for eval calcuations. Contains both EG and MG score packed into 1 value.
typedef int32_t Score_t;
#define S(mg, eg) \
	((Score_t)((uint32_t)eg << 16) + mg)

/*

 ██████╗ ██████╗ ███╗   ██╗███████╗████████╗ █████╗ ███╗   ██╗████████╗███████╗
██╔════╝██╔═══██╗████╗  ██║██╔════╝╚══██╔══╝██╔══██╗████╗  ██║╚══██╔══╝██╔════╝
██║     ██║   ██║██╔██╗ ██║███████╗   ██║   ███████║██╔██╗ ██║   ██║   ███████╗
██║     ██║   ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║╚██╗██║   ██║   ╚════██║
╚██████╗╚██████╔╝██║ ╚████║███████║   ██║   ██║  ██║██║ ╚████║   ██║   ███████║
 ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝

*/                                                                        

#define BISHOP_PAIR_BONUS \
   S(41, 66)

#define PASSED_PAWN_PST { { \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
   S(27, 334), S(37, 276), S(9, 290), S(25, 304), S(65, 345), S(7, 360), S(-25, 372), S(34, 369), \
   S(-24, 180), S(-50, 177), S(-6, 119), S(-111, 116), S(2, 114), S(-31, 218), S(-82, 259), S(-88, 303), \
   S(-10, 84), S(15, 68), S(37, 49), S(30, 39), S(-24, 76), S(-70, 110), S(-83, 150), S(-122, 186), \
   S(10, 47), S(2, 43), S(3, 25), S(1, 15), S(-55, 40), S(-63, 53), S(-32, 79), S(-69, 96), \
   S(55, 9), S(14, 22), S(47, 4), S(0, -3), S(-40, 14), S(-28, 20), S(-53, 41), S(-15, 32), \
   S(25, 2), S(93, 15), S(92, 5), S(-8, 1), S(-35, 13), S(-22, 9), S(-30, 30), S(-30, 30), \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
}, { \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
   S(87, 365), S(92, 345), S(38, 357), S(84, 316), S(104, 295), S(41, 282), S(37, 304), S(-11, 343), \
   S(47, 244), S(8, 261), S(4, 206), S(29, 153), S(9, 96), S(52, 109), S(-14, 109), S(-20, 164), \
   S(11, 136), S(4, 128), S(10, 95), S(7, 80), S(15, 56), S(62, 42), S(16, 69), S(22, 70), \
   S(8, 73), S(-25, 75), S(-26, 58), S(-8, 36), S(-16, 36), S(-12, 38), S(11, 53), S(41, 39), \
   S(0, 30), S(-9, 35), S(-34, 31), S(-26, 20), S(7, 6), S(12, 12), S(36, 33), S(52, 10), \
   S(0, 23), S(7, 27), S(5, 9), S(-24, 24), S(34, 5), S(34, 4), S(73, 25), S(27, 20), \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
}, }

#define BLOCKED_PASSERS { \
   S(157, -419), S(30, -128), S(2, -49), S(-5, -17), S(0, 1), S(-14, -2), S(0, 0), S(0, 0), \
}

#define ROOK_OPEN_FILE { \
   S(66, 11), S(76, 2), S(66, 3), S(69, 6), S(73, 5), S(100, -7), S(148, -17), S(150, -8), \
}

#define ROOK_SEMI_OPEN_FILE { \
   S(8, 58), S(30, 25), S(29, 13), S(33, 5), S(35, -4), S(42, -5), S(72, -10), S(44, 38), \
}

#define QUEEN_OPEN_FILE { \
   S(7, 40), S(0, 45), S(-17, 45), S(-16, 57), S(0, 52), S(36, 7), S(59, -16), S(107, -25), \
}

#define QUEEN_SEMI_OPEN_FILE { \
   S(3, 16), S(18, 10), S(5, 14), S(-5, 49), S(13, 19), S(33, -34), S(55, -71), S(55, -33), \
}

#define KING_OPEN_FILE { \
   S(-86, -14), S(-124, 1), S(-95, -1), S(-41, -13), S(-65, -4), S(-95, 7), S(-110, 14), S(-61, 2), \
}

#define KING_SEMI_OPEN_FILE { \
   S(-34, 39), S(-63, 21), S(-24, -1), S(-14, -6), S(-17, -1), S(-31, 2), S(-47, 19), S(-42, 34), \
}

#define ISOLATED_PAWNS { \
   S(-16, -20), S(-23, -16), S(-24, -18), S(-38, -13), S(-34, -20), S(-12, -17), S(-19, -18), S(-31, -15), \
}

/*
Average PST values for MG, EG:
Knight Values: 461 365
Bishop Values: 468 404
Rook Values: 565 733
Queen Values: 1276 1328
Pawn Values: 108 157
*/

#define KNIGHT_PST { { \
   S(210, 229), S(426, 248), S(276, 311), S(452, 299), S(527, 290), S(453, 297), S(408, 293), S(351, 238), \
   S(415, 281), S(519, 294), S(465, 325), S(544, 320), S(488, 343), S(567, 309), S(424, 325), S(312, 332), \
   S(462, 298), S(546, 312), S(550, 332), S(548, 341), S(533, 343), S(537, 330), S(493, 343), S(367, 325), \
   S(451, 336), S(477, 346), S(530, 368), S(522, 363), S(532, 369), S(533, 351), S(484, 345), S(412, 337), \
   S(449, 319), S(499, 341), S(486, 379), S(494, 367), S(463, 381), S(479, 364), S(431, 349), S(385, 352), \
   S(426, 309), S(446, 355), S(451, 362), S(463, 373), S(487, 360), S(464, 351), S(441, 350), S(381, 342), \
   S(347, 308), S(417, 337), S(419, 353), S(424, 367), S(418, 361), S(427, 354), S(389, 338), S(364, 326), \
   S(410, 260), S(391, 297), S(339, 355), S(400, 331), S(355, 339), S(390, 320), S(406, 261), S(303, 306), \
}, { \
   S(255, 361), S(268, 423), S(403, 397), S(422, 394), S(502, 381), S(348, 401), S(409, 331), S(339, 269), \
   S(391, 385), S(424, 422), S(524, 404), S(550, 408), S(524, 415), S(564, 374), S(473, 375), S(460, 359), \
   S(420, 403), S(514, 404), S(540, 435), S(579, 425), S(629, 404), S(704, 379), S(585, 395), S(512, 366), \
   S(474, 400), S(508, 429), S(526, 445), S(569, 447), S(538, 454), S(593, 443), S(505, 445), S(538, 396), \
   S(464, 402), S(482, 434), S(504, 450), S(507, 454), S(521, 456), S(514, 449), S(521, 424), S(480, 394), \
   S(458, 390), S(479, 415), S(504, 420), S(498, 441), S(518, 444), S(509, 421), S(517, 412), S(462, 397), \
   S(442, 351), S(451, 376), S(474, 410), S(485, 411), S(489, 414), S(502, 400), S(494, 386), S(471, 370), \
   S(344, 368), S(456, 340), S(425, 384), S(439, 398), S(461, 398), S(463, 394), S(456, 365), S(432, 328), \
}, }

#define BISHOP_PST { { \
   S(311, 375), S(449, 355), S(416, 345), S(366, 350), S(265, 387), S(310, 378), S(373, 363), S(398, 363), \
   S(464, 328), S(463, 359), S(437, 364), S(435, 360), S(513, 363), S(413, 383), S(412, 394), S(308, 387), \
   S(491, 351), S(619, 328), S(496, 373), S(536, 365), S(500, 382), S(517, 369), S(413, 392), S(405, 376), \
   S(469, 360), S(453, 380), S(515, 381), S(529, 374), S(503, 403), S(494, 384), S(485, 375), S(414, 371), \
   S(432, 363), S(444, 381), S(437, 396), S(484, 393), S(495, 384), S(511, 375), S(456, 371), S(401, 370), \
   S(430, 359), S(441, 379), S(448, 391), S(449, 388), S(486, 384), S(475, 376), S(499, 371), S(452, 372), \
   S(447, 346), S(440, 378), S(441, 363), S(446, 369), S(447, 370), S(487, 365), S(487, 353), S(419, 349), \
   S(307, 370), S(362, 384), S(422, 346), S(385, 379), S(411, 363), S(415, 349), S(419, 365), S(358, 368), \
}, { \
   S(474, 421), S(436, 432), S(412, 439), S(398, 439), S(417, 438), S(426, 434), S(444, 429), S(472, 405), \
   S(436, 445), S(498, 444), S(493, 441), S(469, 437), S(510, 437), S(525, 422), S(508, 434), S(443, 411), \
   S(452, 445), S(498, 453), S(522, 455), S(532, 447), S(558, 441), S(592, 451), S(543, 442), S(501, 432), \
   S(474, 443), S(496, 457), S(514, 465), S(567, 461), S(542, 473), S(536, 463), S(502, 454), S(481, 438), \
   S(480, 433), S(502, 451), S(509, 468), S(529, 473), S(531, 465), S(509, 461), S(512, 437), S(490, 422), \
   S(500, 427), S(515, 445), S(508, 459), S(516, 457), S(508, 464), S(521, 450), S(509, 437), S(499, 421), \
   S(513, 406), S(516, 406), S(517, 423), S(490, 438), S(503, 441), S(519, 435), S(538, 416), S(503, 396), \
   S(462, 400), S(493, 416), S(475, 404), S(461, 432), S(470, 429), S(474, 419), S(480, 416), S(473, 396), \
}, }

#define ROOK_PST { { \
   S(528, 686), S(500, 697), S(516, 693), S(539, 690), S(544, 691), S(542, 693), S(502, 694), S(515, 681), \
   S(589, 655), S(598, 662), S(607, 654), S(589, 659), S(540, 673), S(545, 684), S(462, 693), S(459, 690), \
   S(577, 658), S(596, 655), S(624, 659), S(603, 644), S(553, 662), S(492, 693), S(495, 677), S(451, 671), \
   S(526, 664), S(487, 678), S(493, 680), S(541, 675), S(498, 686), S(526, 687), S(425, 692), S(466, 669), \
   S(451, 672), S(483, 673), S(484, 676), S(488, 674), S(485, 678), S(488, 683), S(429, 682), S(432, 675), \
   S(447, 662), S(478, 665), S(501, 663), S(501, 652), S(468, 669), S(487, 674), S(434, 682), S(455, 649), \
   S(469, 643), S(458, 669), S(489, 655), S(485, 660), S(457, 673), S(463, 684), S(412, 666), S(425, 657), \
   S(500, 653), S(511, 665), S(505, 671), S(504, 679), S(505, 675), S(495, 681), S(425, 700), S(474, 659), \
}, { \
   S(666, 791), S(663, 803), S(625, 820), S(683, 796), S(680, 802), S(644, 815), S(677, 807), S(702, 789), \
   S(636, 805), S(627, 820), S(667, 812), S(709, 794), S(706, 790), S(705, 796), S(582, 830), S(630, 800), \
   S(600, 800), S(628, 807), S(638, 808), S(667, 793), S(674, 787), S(710, 781), S(674, 792), S(656, 779), \
   S(584, 802), S(603, 803), S(620, 816), S(632, 799), S(624, 799), S(657, 795), S(629, 799), S(613, 787), \
   S(594, 784), S(569, 809), S(594, 811), S(604, 799), S(619, 784), S(612, 791), S(612, 793), S(616, 764), \
   S(588, 774), S(586, 793), S(593, 797), S(597, 791), S(617, 781), S(621, 782), S(638, 772), S(609, 757), \
   S(585, 775), S(593, 780), S(591, 795), S(600, 788), S(611, 778), S(635, 777), S(642, 765), S(554, 766), \
   S(618, 785), S(608, 791), S(614, 804), S(625, 795), S(628, 790), S(633, 789), S(587, 799), S(634, 740), \
}, }

#define QUEEN_PST { { \
   S(1189, 1191), S(1191, 1210), S(1383, 1121), S(1170, 1202), S(1248, 1196), S(1178, 1226), S(1267, 1141), S(1074, 1220), \
   S(1348, 1098), S(1275, 1153), S(1360, 1148), S(1168, 1270), S(1259, 1212), S(1169, 1226), S(1069, 1267), S(1135, 1176), \
   S(1303, 1108), S(1326, 1155), S(1423, 1162), S(1309, 1167), S(1195, 1241), S(1146, 1254), S(1133, 1239), S(1090, 1211), \
   S(1213, 1197), S(1223, 1188), S(1189, 1223), S(1187, 1239), S(1191, 1201), S(1161, 1222), S(1123, 1234), S(1155, 1162), \
   S(1196, 1199), S(1176, 1228), S(1159, 1300), S(1193, 1218), S(1169, 1184), S(1143, 1267), S(1131, 1227), S(1104, 1185), \
   S(1199, 1157), S(1184, 1190), S(1169, 1207), S(1164, 1169), S(1173, 1196), S(1197, 1172), S(1140, 1241), S(1114, 1155), \
   S(1172, 1136), S(1154, 1172), S(1210, 1132), S(1158, 1188), S(1192, 1142), S(1202, 1154), S(1093, 1224), S(1112, 1134), \
   S(1110, 1188), S(1148, 1168), S(1151, 1175), S(1188, 1102), S(1172, 1123), S(1134, 1188), S(1080, 1216), S(1072, 1172), \
}, { \
   S(1307, 1446), S(1338, 1472), S(1353, 1478), S(1384, 1479), S(1424, 1463), S(1469, 1466), S(1471, 1476), S(1375, 1525), \
   S(1325, 1434), S(1318, 1462), S(1340, 1505), S(1341, 1511), S(1319, 1580), S(1447, 1514), S(1378, 1556), S(1378, 1527), \
   S(1332, 1424), S(1354, 1432), S(1356, 1475), S(1388, 1491), S(1429, 1489), S(1483, 1516), S(1453, 1498), S(1428, 1508), \
   S(1317, 1452), S(1334, 1470), S(1349, 1482), S(1368, 1485), S(1350, 1553), S(1372, 1576), S(1360, 1584), S(1361, 1524), \
   S(1357, 1411), S(1335, 1474), S(1359, 1470), S(1358, 1501), S(1360, 1504), S(1356, 1522), S(1367, 1527), S(1368, 1501), \
   S(1350, 1404), S(1374, 1395), S(1355, 1469), S(1368, 1441), S(1373, 1442), S(1369, 1478), S(1382, 1478), S(1367, 1449), \
   S(1339, 1387), S(1365, 1410), S(1389, 1384), S(1383, 1407), S(1382, 1404), S(1386, 1408), S(1378, 1410), S(1347, 1438), \
   S(1349, 1402), S(1338, 1408), S(1361, 1398), S(1386, 1362), S(1362, 1387), S(1318, 1429), S(1311, 1447), S(1335, 1380), \
}, }

#define PAWN_PST { { \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
   S(27, 334), S(37, 276), S(9, 290), S(25, 304), S(65, 345), S(7, 360), S(-25, 372), S(34, 369), \
   S(127, 142), S(228, 94), S(211, 126), S(294, 130), S(131, 185), S(159, 130), S(101, 174), S(137, 149), \
   S(60, 135), S(104, 112), S(136, 110), S(153, 107), S(150, 120), S(147, 119), S(135, 131), S(136, 128), \
   S(40, 128), S(64, 117), S(110, 109), S(138, 109), S(133, 115), S(141, 109), S(111, 118), S(123, 115), \
   S(34, 121), S(59, 115), S(96, 115), S(89, 122), S(116, 119), S(129, 111), S(134, 102), S(129, 104), \
   S(28, 133), S(64, 117), S(103, 117), S(86, 113), S(98, 121), S(159, 108), S(138, 104), S(112, 108), \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
}, { \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
   S(87, 365), S(92, 345), S(38, 357), S(84, 316), S(104, 295), S(41, 282), S(37, 304), S(-11, 343), \
   S(89, 176), S(127, 150), S(155, 142), S(168, 137), S(220, 149), S(228, 122), S(193, 155), S(147, 147), \
   S(91, 153), S(122, 133), S(123, 128), S(146, 105), S(152, 113), S(146, 108), S(116, 122), S(109, 121), \
   S(71, 140), S(103, 123), S(111, 116), S(138, 112), S(134, 115), S(136, 104), S(102, 112), S(100, 111), \
   S(78, 125), S(99, 112), S(110, 114), S(103, 123), S(112, 131), S(125, 112), S(133, 101), S(115, 102), \
   S(63, 135), S(103, 114), S(85, 135), S(81, 133), S(82, 145), S(152, 117), S(138, 108), S(104, 103), \
   S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), \
}, }

#define KING_PST { { \
   S(77, -100), S(138, -37), S(93, -76), S(209, -82), S(334, -33), S(401, -9), S(428, -45), S(342, -58), \
   S(70, -41), S(206, 21), S(151, 10), S(2, 18), S(348, 38), S(433, 27), S(442, 13), S(504, -50), \
   S(110, -16), S(130, 10), S(258, 24), S(-24, 39), S(370, 43), S(472, 34), S(462, 14), S(416, -3), \
   S(-61, -21), S(42, 17), S(33, 30), S(-99, 62), S(322, 61), S(308, 61), S(388, 44), S(370, 10), \
   S(-112, -9), S(-71, 13), S(-97, 45), S(-179, 69), S(238, 78), S(341, 48), S(369, 18), S(292, 1), \
   S(-117, -21), S(-25, 0), S(-117, 38), S(-151, 54), S(309, 54), S(302, 39), S(379, 6), S(384, -20), \
   S(18, -44), S(11, -16), S(-30, 5), S(-134, 30), S(326, 35), S(357, 13), S(408, -15), S(406, -37), \
   S(20, -94), S(55, -73), S(-29, -36), S(-134, -2), S(369, -24), S(318, -13), S(431, -59), S(417, -86), \
}, { \
   S(-183, -151), S(-248, -65), S(-241, -54), S(-336, -28), S(-25, -22), S(40, -21), S(314, -87), S(85, -61), \
   S(-182, -61), S(-268, 0), S(-263, 0), S(-401, 28), S(64, 15), S(82, 17), S(117, 20), S(-52, 19), \
   S(-311, -7), S(-260, 11), S(-317, 20), S(-367, 44), S(57, 38), S(262, 28), S(188, 43), S(27, 9), \
   S(-337, -7), S(-374, 31), S(-392, 39), S(-447, 64), S(-43, 56), S(30, 44), S(-75, 47), S(-203, 23), \
   S(-453, -5), S(-335, -2), S(-435, 41), S(-523, 66), S(-116, 74), S(-116, 58), S(-94, 30), S(-158, 5), \
   S(-388, -28), S(-384, -1), S(-440, 28), S(-517, 56), S(-108, 65), S(-75, 44), S(-20, 12), S(-50, -15), \
   S(-292, -74), S(-345, -25), S(-423, 12), S(-482, 32), S(-108, 49), S(-46, 26), S(26, -5), S(28, -35), \
   S(-315, -110), S(-277, -94), S(-319, -60), S(-467, -7), S(-13, -25), S(-69, -4), S(46, -48), S(41, -92), \
}, }

#endif